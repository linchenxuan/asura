// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: asura_net.proto

package net

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EAsuraRetCode defines standardized error codes that need to be understood by both servers and clients
// Values 0-10000 are reserved for framework-level errors that clients must handle appropriately
type EAsuraRetCode int32

const (
	// AsuraRetCodeOK indicates successful operation completion
	EAsuraRetCode_AsuraRetCodeOK EAsuraRetCode = 0
	// RPCDeadlineExceeded indicates the request exceeded its deadline
	// This is a client-triggered request that should not be automatically retried
	// Clients must explicitly retry if needed
	EAsuraRetCode_RPCDeadlineExceeded EAsuraRetCode = 408
	// AsuraMax defines the upper bound for framework-level error codes
	// All values less than or equal to this are reserved for Asura framework use
	EAsuraRetCode_AsuraMax EAsuraRetCode = 9999
)

// Enum value maps for EAsuraRetCode.
var (
	EAsuraRetCode_name = map[int32]string{
		0:    "AsuraRetCodeOK",
		408:  "RPCDeadlineExceeded",
		9999: "AsuraMax",
	}
	EAsuraRetCode_value = map[string]int32{
		"AsuraRetCodeOK":      0,
		"RPCDeadlineExceeded": 408,
		"AsuraMax":            9999,
	}
)

func (x EAsuraRetCode) Enum() *EAsuraRetCode {
	p := new(EAsuraRetCode)
	*p = x
	return p
}

func (x EAsuraRetCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAsuraRetCode) Descriptor() protoreflect.EnumDescriptor {
	return file_asura_net_proto_enumTypes[0].Descriptor()
}

func (EAsuraRetCode) Type() protoreflect.EnumType {
	return &file_asura_net_proto_enumTypes[0]
}

func (x EAsuraRetCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAsuraRetCode.Descriptor instead.
func (EAsuraRetCode) EnumDescriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{0}
}

// P2PRoute represents point-to-point routing for direct entity-to-entity communication
// Used for targeted messaging between specific game entities (players, NPCs, rooms, etc.)
type P2PRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DstEntityID is the unique identifier of the target entity
	// This should be the globally unique entity ID within the cluster
	DstEntityID uint32 `protobuf:"varint,1,opt,name=DstEntityID,proto3" json:"DstEntityID,omitempty"`
}

func (x *P2PRoute) Reset() {
	*x = P2PRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PRoute) ProtoMessage() {}

func (x *P2PRoute) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PRoute.ProtoReflect.Descriptor instead.
func (*P2PRoute) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{0}
}

func (x *P2PRoute) GetDstEntityID() uint32 {
	if x != nil {
		return x.DstEntityID
	}
	return 0
}

// RandRoute represents random routing strategy for load distribution
// Routes messages to a random instance within a functional group
type RandRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FuncID identifies the functional group for routing
	// Maps to specific service types (login, matchmaking, chat, etc.)
	FuncID uint32 `protobuf:"varint,1,opt,name=FuncID,proto3" json:"FuncID,omitempty"`
	// UseConstantRoute enables deterministic routing for testing/debugging
	// When true, uses ConstantKey for consistent routing decisions
	UseConstantRoute bool `protobuf:"varint,2,opt,name=UseConstantRoute,proto3" json:"UseConstantRoute,omitempty"`
	// ConstantKey provides deterministic routing key when UseConstantRoute is true
	// Useful for testing scenarios requiring predictable routing
	ConstantKey uint64 `protobuf:"varint,3,opt,name=ConstantKey,proto3" json:"ConstantKey,omitempty"`
	// AreaID specifies the geographic or logical area for routing
	// Used for area-based service partitioning and locality optimization
	AreaID uint32 `protobuf:"varint,4,opt,name=AreaID,proto3" json:"AreaID,omitempty"`
}

func (x *RandRoute) Reset() {
	*x = RandRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandRoute) ProtoMessage() {}

func (x *RandRoute) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandRoute.ProtoReflect.Descriptor instead.
func (*RandRoute) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{1}
}

func (x *RandRoute) GetFuncID() uint32 {
	if x != nil {
		return x.FuncID
	}
	return 0
}

func (x *RandRoute) GetUseConstantRoute() bool {
	if x != nil {
		return x.UseConstantRoute
	}
	return false
}

func (x *RandRoute) GetConstantKey() uint64 {
	if x != nil {
		return x.ConstantKey
	}
	return 0
}

func (x *RandRoute) GetAreaID() uint32 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

// BroadCastRoute represents broadcast routing to all instances within a functional group
// Used for global notifications, announcements, or state synchronization
type BroadCastRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FuncID identifies the functional group to broadcast to
	FuncID uint32 `protobuf:"varint,1,opt,name=FuncID,proto3" json:"FuncID,omitempty"`
	// AreaID specifies the target area for the broadcast
	// When 0, broadcasts across all areas
	AreaID uint32 `protobuf:"varint,2,opt,name=AreaID,proto3" json:"AreaID,omitempty"`
}

func (x *BroadCastRoute) Reset() {
	*x = BroadCastRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadCastRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadCastRoute) ProtoMessage() {}

func (x *BroadCastRoute) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadCastRoute.ProtoReflect.Descriptor instead.
func (*BroadCastRoute) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{2}
}

func (x *BroadCastRoute) GetFuncID() uint32 {
	if x != nil {
		return x.FuncID
	}
	return 0
}

func (x *BroadCastRoute) GetAreaID() uint32 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

// MulCastRoute represents multicast routing to specific entity IDs
// Allows selective messaging to multiple predefined recipients
type MulCastRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityIDs is the list of target entity identifiers
	// Each ID must be a valid entity identifier within the cluster
	EntityIDs []int32 `protobuf:"varint,1,rep,packed,name=EntityIDs,proto3" json:"EntityIDs,omitempty"`
}

func (x *MulCastRoute) Reset() {
	*x = MulCastRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MulCastRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MulCastRoute) ProtoMessage() {}

func (x *MulCastRoute) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MulCastRoute.ProtoReflect.Descriptor instead.
func (*MulCastRoute) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{3}
}

func (x *MulCastRoute) GetEntityIDs() []int32 {
	if x != nil {
		return x.EntityIDs
	}
	return nil
}

// InternalRoute handles sidecar-to-sidecar communication during entity migration
// Used for backend service coordination during state transfers
type InternalRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InternalRoute) Reset() {
	*x = InternalRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalRoute) ProtoMessage() {}

func (x *InternalRoute) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalRoute.ProtoReflect.Descriptor instead.
func (*InternalRoute) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{4}
}

// RouteHead encapsulates complete routing information for message delivery
// Provides the routing layer with all necessary context for message dispatch
type RouteHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SrcEntityID identifies the originating entity
	// Used for response routing and audit trails
	SrcEntityID uint32 `protobuf:"varint,1,opt,name=SrcEntityID,proto3" json:"SrcEntityID,omitempty"`
	// MsgID is the unique message type identifier
	// Maps to specific protobuf message types in the application layer
	MsgID string `protobuf:"bytes,2,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	// RouteType specifies the routing strategy for this message
	// Exactly one of these routing types must be specified
	//
	// Types that are assignable to RouteType:
	//	*RouteHead_P2P
	//	*RouteHead_Rand
	//	*RouteHead_BroadCast
	//	*RouteHead_MulCast
	//	*RouteHead_Inter
	RouteType isRouteHead_RouteType `protobuf_oneof:"RouteType"`
	// SrcSetVersion tracks the version of the source entity's service set
	SrcSetVersion uint64 `protobuf:"varint,8,opt,name=SrcSetVersion,proto3" json:"SrcSetVersion,omitempty"`
	// DstSetVersion specifies the expected version of the target service set
	// When 0, indicates no specific version requirement
	DstSetVersion uint64 `protobuf:"varint,9,opt,name=DstSetVersion,proto3" json:"DstSetVersion,omitempty"`
}

func (x *RouteHead) Reset() {
	*x = RouteHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteHead) ProtoMessage() {}

func (x *RouteHead) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteHead.ProtoReflect.Descriptor instead.
func (*RouteHead) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{5}
}

func (x *RouteHead) GetSrcEntityID() uint32 {
	if x != nil {
		return x.SrcEntityID
	}
	return 0
}

func (x *RouteHead) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (m *RouteHead) GetRouteType() isRouteHead_RouteType {
	if m != nil {
		return m.RouteType
	}
	return nil
}

func (x *RouteHead) GetP2P() *P2PRoute {
	if x, ok := x.GetRouteType().(*RouteHead_P2P); ok {
		return x.P2P
	}
	return nil
}

func (x *RouteHead) GetRand() *RandRoute {
	if x, ok := x.GetRouteType().(*RouteHead_Rand); ok {
		return x.Rand
	}
	return nil
}

func (x *RouteHead) GetBroadCast() *BroadCastRoute {
	if x, ok := x.GetRouteType().(*RouteHead_BroadCast); ok {
		return x.BroadCast
	}
	return nil
}

func (x *RouteHead) GetMulCast() *MulCastRoute {
	if x, ok := x.GetRouteType().(*RouteHead_MulCast); ok {
		return x.MulCast
	}
	return nil
}

func (x *RouteHead) GetInter() *InternalRoute {
	if x, ok := x.GetRouteType().(*RouteHead_Inter); ok {
		return x.Inter
	}
	return nil
}

func (x *RouteHead) GetSrcSetVersion() uint64 {
	if x != nil {
		return x.SrcSetVersion
	}
	return 0
}

func (x *RouteHead) GetDstSetVersion() uint64 {
	if x != nil {
		return x.DstSetVersion
	}
	return 0
}

type isRouteHead_RouteType interface {
	isRouteHead_RouteType()
}

type RouteHead_P2P struct {
	// P2P routing for direct entity communication
	P2P *P2PRoute `protobuf:"bytes,3,opt,name=P2P,proto3,oneof"`
}

type RouteHead_Rand struct {
	// Rand routing for load-balanced distribution
	Rand *RandRoute `protobuf:"bytes,4,opt,name=Rand,proto3,oneof"`
}

type RouteHead_BroadCast struct {
	// BroadCast routing for global notifications
	BroadCast *BroadCastRoute `protobuf:"bytes,5,opt,name=BroadCast,proto3,oneof"`
}

type RouteHead_MulCast struct {
	// MulCast routing for selective multicasting
	MulCast *MulCastRoute `protobuf:"bytes,6,opt,name=MulCast,proto3,oneof"`
}

type RouteHead_Inter struct {
	// Inter routing for migration coordination
	Inter *InternalRoute `protobuf:"bytes,7,opt,name=Inter,proto3,oneof"`
}

func (*RouteHead_P2P) isRouteHead_RouteType() {}

func (*RouteHead_Rand) isRouteHead_RouteType() {}

func (*RouteHead_BroadCast) isRouteHead_RouteType() {}

func (*RouteHead_MulCast) isRouteHead_RouteType() {}

func (*RouteHead_Inter) isRouteHead_RouteType() {}

// PkgHead contains metadata for individual message packages
// Provides envelope information for message processing and routing
type PkgHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MsgID identifies the message type for handler dispatch
	MsgID string `protobuf:"bytes,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	// RetCode indicates the operation result status
	// Should be one of the EAsuraRetCode values
	RetCode int32 `protobuf:"varint,3,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	// SvrPkgSeq is the server-side package sequence number
	// Starts from 1 for each server instance
	SvrPkgSeq uint32 `protobuf:"fixed32,4,opt,name=SvrPkgSeq,proto3" json:"SvrPkgSeq,omitempty"`
	// CltPkgSeq is the client-side package sequence number
	// Starts from 1 for each client connection
	CltPkgSeq uint32 `protobuf:"fixed32,5,opt,name=CltPkgSeq,proto3" json:"CltPkgSeq,omitempty"`
	// SrcActorID identifies the originating actor/entity
	// Can be player UID, room ID, or any other entity identifier
	SrcActorID uint64 `protobuf:"varint,6,opt,name=SrcActorID,proto3" json:"SrcActorID,omitempty"`
	// DstActorID identifies the target actor/entity
	// Can be player UID, room ID, or any other entity identifier
	DstActorID uint64 `protobuf:"varint,7,opt,name=DstActorID,proto3" json:"DstActorID,omitempty"`
	// SrcCltVersion indicates the client version of the request originator
	SrcCltVersion int64 `protobuf:"varint,8,opt,name=SrcCltVersion,proto3" json:"SrcCltVersion,omitempty"`
}

func (x *PkgHead) Reset() {
	*x = PkgHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgHead) ProtoMessage() {}

func (x *PkgHead) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgHead.ProtoReflect.Descriptor instead.
func (*PkgHead) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{6}
}

func (x *PkgHead) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (x *PkgHead) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *PkgHead) GetSvrPkgSeq() uint32 {
	if x != nil {
		return x.SvrPkgSeq
	}
	return 0
}

func (x *PkgHead) GetCltPkgSeq() uint32 {
	if x != nil {
		return x.CltPkgSeq
	}
	return 0
}

func (x *PkgHead) GetSrcActorID() uint64 {
	if x != nil {
		return x.SrcActorID
	}
	return 0
}

func (x *PkgHead) GetDstActorID() uint64 {
	if x != nil {
		return x.DstActorID
	}
	return 0
}

func (x *PkgHead) GetSrcCltVersion() int64 {
	if x != nil {
		return x.SrcCltVersion
	}
	return 0
}

// PkgRouteHeader combines routing and package metadata
// Provides complete message context for processing
type PkgRouteHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RouteHdr contains routing information for message dispatch
	RouteHdr *RouteHead `protobuf:"bytes,1,opt,name=RouteHdr,proto3" json:"RouteHdr,omitempty"`
	// Hdr contains package-level metadata
	Hdr *PkgHead `protobuf:"bytes,2,opt,name=Hdr,proto3" json:"Hdr,omitempty"`
}

func (x *PkgRouteHeader) Reset() {
	*x = PkgRouteHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asura_net_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgRouteHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgRouteHeader) ProtoMessage() {}

func (x *PkgRouteHeader) ProtoReflect() protoreflect.Message {
	mi := &file_asura_net_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgRouteHeader.ProtoReflect.Descriptor instead.
func (*PkgRouteHeader) Descriptor() ([]byte, []int) {
	return file_asura_net_proto_rawDescGZIP(), []int{7}
}

func (x *PkgRouteHeader) GetRouteHdr() *RouteHead {
	if x != nil {
		return x.RouteHdr
	}
	return nil
}

func (x *PkgRouteHeader) GetHdr() *PkgHead {
	if x != nil {
		return x.Hdr
	}
	return nil
}

var File_asura_net_proto protoreflect.FileDescriptor

var file_asura_net_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x73, 0x75, 0x72, 0x61, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x6e, 0x65, 0x74, 0x22, 0x2c, 0x0a, 0x08, 0x50, 0x32, 0x50, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x44, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44,
	0x22, 0x40, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x22, 0x2c, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73,
	0x22, 0x0f, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x22, 0xf5, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x72, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x03, 0x50, 0x32, 0x50, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x32, 0x50, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x50, 0x32, 0x50, 0x12, 0x24, 0x0a, 0x04, 0x52, 0x61,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x52,
	0x61, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x4d, 0x75, 0x6c, 0x43, 0x61, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x75, 0x6c,
	0x43, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x4d, 0x75, 0x6c,
	0x43, 0x61, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x72, 0x63, 0x53, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x53, 0x72, 0x63, 0x53, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x44,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x07, 0x50, 0x6b,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x76, 0x72, 0x50, 0x6b, 0x67, 0x53,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x53, 0x76, 0x72, 0x50, 0x6b, 0x67,
	0x53, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x74, 0x50, 0x6b, 0x67, 0x53, 0x65, 0x71,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x43, 0x6c, 0x74, 0x50, 0x6b, 0x67, 0x53, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x72, 0x63, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x72, 0x63, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x73, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x44, 0x73, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x72, 0x63, 0x43, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x72, 0x63, 0x43, 0x6c, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x0e, 0x50, 0x6b, 0x67, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x48, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x08, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x48, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x03, 0x48, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6b, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x03, 0x48, 0x64, 0x72, 0x2a, 0x4c, 0x0a, 0x0d, 0x45, 0x41, 0x73, 0x75, 0x72, 0x61, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x73, 0x75, 0x72, 0x61, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x50,
	0x43, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x10, 0x98, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x73, 0x75, 0x72, 0x61, 0x4d, 0x61, 0x78,
	0x10, 0x8f, 0x4e, 0x42, 0x05, 0x5a, 0x03, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_asura_net_proto_rawDescOnce sync.Once
	file_asura_net_proto_rawDescData = file_asura_net_proto_rawDesc
)

func file_asura_net_proto_rawDescGZIP() []byte {
	file_asura_net_proto_rawDescOnce.Do(func() {
		file_asura_net_proto_rawDescData = protoimpl.X.CompressGZIP(file_asura_net_proto_rawDescData)
	})
	return file_asura_net_proto_rawDescData
}

var file_asura_net_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_asura_net_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_asura_net_proto_goTypes = []interface{}{
	(EAsuraRetCode)(0),     // 0: net.EAsuraRetCode
	(*P2PRoute)(nil),       // 1: net.P2PRoute
	(*RandRoute)(nil),      // 2: net.RandRoute
	(*BroadCastRoute)(nil), // 3: net.BroadCastRoute
	(*MulCastRoute)(nil),   // 4: net.MulCastRoute
	(*InternalRoute)(nil),  // 5: net.InternalRoute
	(*RouteHead)(nil),      // 6: net.RouteHead
	(*PkgHead)(nil),        // 7: net.PkgHead
	(*PkgRouteHeader)(nil), // 8: net.PkgRouteHeader
}
var file_asura_net_proto_depIdxs = []int32{
	1, // 0: net.RouteHead.P2P:type_name -> net.P2PRoute
	2, // 1: net.RouteHead.Rand:type_name -> net.RandRoute
	3, // 2: net.RouteHead.BroadCast:type_name -> net.BroadCastRoute
	4, // 3: net.RouteHead.MulCast:type_name -> net.MulCastRoute
	5, // 4: net.RouteHead.Inter:type_name -> net.InternalRoute
	6, // 5: net.PkgRouteHeader.RouteHdr:type_name -> net.RouteHead
	7, // 6: net.PkgRouteHeader.Hdr:type_name -> net.PkgHead
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_asura_net_proto_init() }
func file_asura_net_proto_init() {
	if File_asura_net_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_asura_net_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asura_net_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asura_net_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadCastRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asura_net_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MulCastRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asura_net_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asura_net_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asura_net_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asura_net_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgRouteHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_asura_net_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RouteHead_P2P)(nil),
		(*RouteHead_Rand)(nil),
		(*RouteHead_BroadCast)(nil),
		(*RouteHead_MulCast)(nil),
		(*RouteHead_Inter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_asura_net_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_asura_net_proto_goTypes,
		DependencyIndexes: file_asura_net_proto_depIdxs,
		EnumInfos:         file_asura_net_proto_enumTypes,
		MessageInfos:      file_asura_net_proto_msgTypes,
	}.Build()
	File_asura_net_proto = out.File
	file_asura_net_proto_rawDesc = nil
	file_asura_net_proto_goTypes = nil
	file_asura_net_proto_depIdxs = nil
}
